// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: hotel.sql

package db

import (
	"context"
)

const createHotel = `-- name: CreateHotel :one
INSERT INTO hotel (name,
                   address,
                   location)
VALUES (
   $1, $2, $3
) RETURNING id, name, address, location, created_at
`

type CreateHotelParams struct {
	Name     string `json:"name"`
	Address  string `json:"address"`
	Location string `json:"location"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, createHotel, arg.Name, arg.Address, arg.Location)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHotel = `-- name: DeleteHotel :exec
DELETE FROM hotel
WHERE id = $1
`

func (q *Queries) DeleteHotel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHotel, id)
	return err
}

const getHotel = `-- name: GetHotel :one
SELECT id, name, address, location, created_at FROM hotel
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHotel(ctx context.Context, id int64) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, getHotel, id)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const listHotels = `-- name: ListHotels :many
SELECT id, name, address, location, created_at FROM hotel
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListHotelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHotels(ctx context.Context, arg ListHotelsParams) ([]Hotel, error) {
	rows, err := q.db.QueryContext(ctx, listHotels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Location,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHotel = `-- name: UpdateHotel :exec
UPDATE hotel
SET name = $2, address = $3, location = $4
WHERE id = $1
RETURNING id, name, address, location, created_at
`

type UpdateHotelParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Address  string `json:"address"`
	Location string `json:"location"`
}

func (q *Queries) UpdateHotel(ctx context.Context, arg UpdateHotelParams) error {
	_, err := q.db.ExecContext(ctx, updateHotel,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Location,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reservation.sql

package db

import (
	"context"
	"time"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservation (
    hotel_id,
    room_id,
    start_date,
    end_date,
    status,
    amount,
    user_id)
VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, hotel_id, room_id, start_date, end_date, status, amount, user_id, created_at
`

type CreateReservationParams struct {
	HotelID   int64     `json:"hotel_id"`
	RoomID    int64     `json:"room_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Status    int32     `json:"status"`
	Amount    int64     `json:"amount"`
	UserID    int64     `json:"user_id"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation,
		arg.HotelID,
		arg.RoomID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.Amount,
		arg.UserID,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.Amount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getReservation = `-- name: GetReservation :one
SELECT id, hotel_id, room_id, start_date, end_date, status, amount, user_id, created_at FROM reservation
WHERE id = $1 FOR UPDATE
`

func (q *Queries) GetReservation(ctx context.Context, id int64) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.Amount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listReservations = `-- name: ListReservations :many
SELECT id, hotel_id, room_id, start_date, end_date, status, amount, user_id, created_at FROM reservation
WHERE
    hotel_id = $1 OR
    room_id = $2
ORDER BY id
    LIMIT $3
OFFSET $4
`

type ListReservationsParams struct {
	HotelID int64 `json:"hotel_id"`
	RoomID  int64 `json:"room_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListReservations(ctx context.Context, arg ListReservationsParams) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, listReservations,
		arg.HotelID,
		arg.RoomID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.HotelID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.Amount,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE reservation
SET
    status = $3
WHERE hotel_id = $1 and room_id = $2
    RETURNING id, hotel_id, room_id, start_date, end_date, status, amount, user_id, created_at
`

type UpdateReservationParams struct {
	HotelID int64 `json:"hotel_id"`
	RoomID  int64 `json:"room_id"`
	Status  int32 `json:"status"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, updateReservation, arg.HotelID, arg.RoomID, arg.Status)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.Amount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: room_type.sql

package db

import (
	"context"
)

const createRoomType = `-- name: CreateRoomType :one
INSERT INTO room_type (
                       name
                       ) VALUES (
    $1
) RETURNING id, name, created_at
`

func (q *Queries) CreateRoomType(ctx context.Context, name string) (RoomType, error) {
	row := q.db.QueryRowContext(ctx, createRoomType, name)
	var i RoomType
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteRoomType = `-- name: DeleteRoomType :exec
DELETE FROM room_type
WHERE id = $1
`

func (q *Queries) DeleteRoomType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoomType, id)
	return err
}

const getRoomType = `-- name: GetRoomType :one
SELECT id, name, created_at FROM room_type
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoomType(ctx context.Context, id int64) (RoomType, error) {
	row := q.db.QueryRowContext(ctx, getRoomType, id)
	var i RoomType
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listRoomType = `-- name: ListRoomType :many
SELECT id, name, created_at FROM room_type
ORDER BY id
    LIMIT $1
OFFSET $2
`

type ListRoomTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoomType(ctx context.Context, arg ListRoomTypeParams) ([]RoomType, error) {
	rows, err := q.db.QueryContext(ctx, listRoomType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomType
	for rows.Next() {
		var i RoomType
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoomType = `-- name: UpdateRoomType :one
UPDATE room_type
SET name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateRoomTypeParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRoomType(ctx context.Context, arg UpdateRoomTypeParams) (RoomType, error) {
	row := q.db.QueryRowContext(ctx, updateRoomType, arg.ID, arg.Name)
	var i RoomType
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

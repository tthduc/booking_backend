// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: room.sql

package db

import (
	"context"
	"database/sql"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
                  room_type_id,
                  hotel_id,
                  is_available)
VALUES (
        $1, $2, $3
        ) RETURNING id, room_type_id, hotel_id, is_available, status, created_at
`

type CreateRoomParams struct {
	RoomTypeID  int64         `json:"room_type_id"`
	HotelID     sql.NullInt64 `json:"hotel_id"`
	IsAvailable int64         `json:"is_available"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.RoomTypeID, arg.HotelID, arg.IsAvailable)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomTypeID,
		&i.HotelID,
		&i.IsAvailable,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const disableRoom = `-- name: DisableRoom :exec
UPDATE room
SET status = $2
WHERE id = $1
    RETURNING id, room_type_id, hotel_id, is_available, status, created_at
`

type DisableRoomParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) DisableRoom(ctx context.Context, arg DisableRoomParams) error {
	_, err := q.db.ExecContext(ctx, disableRoom, arg.ID, arg.Status)
	return err
}

const getRoomByHotelId = `-- name: GetRoomByHotelId :one
SELECT id, room_type_id, hotel_id, is_available, status, created_at FROM room
WHERE $1
`

func (q *Queries) GetRoomByHotelId(ctx context.Context, dollar_1 interface{}) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByHotelId, dollar_1)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomTypeID,
		&i.HotelID,
		&i.IsAvailable,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :exec
UPDATE room
SET room_type_id = $3
WHERE id = $1 AND hotel_id = $2
RETURNING id, room_type_id, hotel_id, is_available, status, created_at
`

type UpdateRoomParams struct {
	ID         int64         `json:"id"`
	HotelID    sql.NullInt64 `json:"hotel_id"`
	RoomTypeID int64         `json:"room_type_id"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) error {
	_, err := q.db.ExecContext(ctx, updateRoom, arg.ID, arg.HotelID, arg.RoomTypeID)
	return err
}

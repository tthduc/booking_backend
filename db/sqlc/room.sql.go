// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: room.sql

package db

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
                  name,
                  room_type_id,
                  hotel_id,
                  is_available,
                  status)
VALUES (
        $1, $2, $3, $4, $5
        ) RETURNING id, name, room_type_id, hotel_id, is_available, status, created_at
`

type CreateRoomParams struct {
	Name        string `json:"name"`
	RoomTypeID  int64  `json:"room_type_id"`
	HotelID     int64  `json:"hotel_id"`
	IsAvailable int64  `json:"is_available"`
	Status      int64  `json:"status"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.Name,
		arg.RoomTypeID,
		arg.HotelID,
		arg.IsAvailable,
		arg.Status,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RoomTypeID,
		&i.HotelID,
		&i.IsAvailable,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM room
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const disableRoom = `-- name: DisableRoom :exec
UPDATE room
SET status = $2
WHERE id = $1
    RETURNING id, name, room_type_id, hotel_id, is_available, status, created_at
`

type DisableRoomParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) DisableRoom(ctx context.Context, arg DisableRoomParams) error {
	_, err := q.db.ExecContext(ctx, disableRoom, arg.ID, arg.Status)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, name, room_type_id, hotel_id, is_available, status, created_at FROM room
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RoomTypeID,
		&i.HotelID,
		&i.IsAvailable,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getRoomByHotelId = `-- name: GetRoomByHotelId :one
SELECT id, name, room_type_id, hotel_id, is_available, status, created_at FROM room
WHERE hotel_id = $1
`

func (q *Queries) GetRoomByHotelId(ctx context.Context, hotelID int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByHotelId, hotelID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RoomTypeID,
		&i.HotelID,
		&i.IsAvailable,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, name, room_type_id, hotel_id, is_available, status, created_at FROM room
ORDER BY id
    LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RoomTypeID,
			&i.HotelID,
			&i.IsAvailable,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE room
SET room_type_id = $3, name = $4
WHERE id = $1 AND hotel_id = $2
RETURNING id, name, room_type_id, hotel_id, is_available, status, created_at
`

type UpdateRoomParams struct {
	ID         int64  `json:"id"`
	HotelID    int64  `json:"hotel_id"`
	RoomTypeID int64  `json:"room_type_id"`
	Name       string `json:"name"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoom,
		arg.ID,
		arg.HotelID,
		arg.RoomTypeID,
		arg.Name,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RoomTypeID,
		&i.HotelID,
		&i.IsAvailable,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

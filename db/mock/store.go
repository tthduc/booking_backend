// Code generated by MockGen. DO NOT EDIT.
// Source: booking-backed/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "booking-backed/db/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateHotel mocks base method.
func (m *MockStore) CreateHotel(arg0 context.Context, arg1 db.CreateHotelParams) (db.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHotel", arg0, arg1)
	ret0, _ := ret[0].(db.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHotel indicates an expected call of CreateHotel.
func (mr *MockStoreMockRecorder) CreateHotel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHotel", reflect.TypeOf((*MockStore)(nil).CreateHotel), arg0, arg1)
}

// CreateRate mocks base method.
func (m *MockStore) CreateRate(arg0 context.Context, arg1 db.CreateRateParams) (db.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRate", arg0, arg1)
	ret0, _ := ret[0].(db.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRate indicates an expected call of CreateRate.
func (mr *MockStoreMockRecorder) CreateRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRate", reflect.TypeOf((*MockStore)(nil).CreateRate), arg0, arg1)
}

// CreateReservation mocks base method.
func (m *MockStore) CreateReservation(arg0 context.Context, arg1 db.CreateReservationParams) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockStoreMockRecorder) CreateReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockStore)(nil).CreateReservation), arg0, arg1)
}

// CreateRoom mocks base method.
func (m *MockStore) CreateRoom(arg0 context.Context, arg1 db.CreateRoomParams) (db.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0, arg1)
	ret0, _ := ret[0].(db.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockStoreMockRecorder) CreateRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockStore)(nil).CreateRoom), arg0, arg1)
}

// CreateRoomInventory mocks base method.
func (m *MockStore) CreateRoomInventory(arg0 context.Context, arg1 db.CreateRoomInventoryParams) (db.RoomInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomInventory", arg0, arg1)
	ret0, _ := ret[0].(db.RoomInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomInventory indicates an expected call of CreateRoomInventory.
func (mr *MockStoreMockRecorder) CreateRoomInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomInventory", reflect.TypeOf((*MockStore)(nil).CreateRoomInventory), arg0, arg1)
}

// CreateRoomType mocks base method.
func (m *MockStore) CreateRoomType(arg0 context.Context, arg1 string) (db.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomType", arg0, arg1)
	ret0, _ := ret[0].(db.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomType indicates an expected call of CreateRoomType.
func (mr *MockStoreMockRecorder) CreateRoomType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomType", reflect.TypeOf((*MockStore)(nil).CreateRoomType), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteHotel mocks base method.
func (m *MockStore) DeleteHotel(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHotel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHotel indicates an expected call of DeleteHotel.
func (mr *MockStoreMockRecorder) DeleteHotel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHotel", reflect.TypeOf((*MockStore)(nil).DeleteHotel), arg0, arg1)
}

// DeleteRoom mocks base method.
func (m *MockStore) DeleteRoom(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockStoreMockRecorder) DeleteRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockStore)(nil).DeleteRoom), arg0, arg1)
}

// DeleteRoomType mocks base method.
func (m *MockStore) DeleteRoomType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomType indicates an expected call of DeleteRoomType.
func (mr *MockStoreMockRecorder) DeleteRoomType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomType", reflect.TypeOf((*MockStore)(nil).DeleteRoomType), arg0, arg1)
}

// DisableRoom mocks base method.
func (m *MockStore) DisableRoom(arg0 context.Context, arg1 db.DisableRoomParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRoom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableRoom indicates an expected call of DisableRoom.
func (mr *MockStoreMockRecorder) DisableRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRoom", reflect.TypeOf((*MockStore)(nil).DisableRoom), arg0, arg1)
}

// GetHotel mocks base method.
func (m *MockStore) GetHotel(arg0 context.Context, arg1 int64) (db.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotel", arg0, arg1)
	ret0, _ := ret[0].(db.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotel indicates an expected call of GetHotel.
func (mr *MockStoreMockRecorder) GetHotel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotel", reflect.TypeOf((*MockStore)(nil).GetHotel), arg0, arg1)
}

// GetReservation mocks base method.
func (m *MockStore) GetReservation(arg0 context.Context, arg1 int64) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockStoreMockRecorder) GetReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockStore)(nil).GetReservation), arg0, arg1)
}

// GetRoom mocks base method.
func (m *MockStore) GetRoom(arg0 context.Context, arg1 int64) (db.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", arg0, arg1)
	ret0, _ := ret[0].(db.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockStoreMockRecorder) GetRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockStore)(nil).GetRoom), arg0, arg1)
}

// GetRoomByHotelId mocks base method.
func (m *MockStore) GetRoomByHotelId(arg0 context.Context, arg1 int64) (db.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByHotelId", arg0, arg1)
	ret0, _ := ret[0].(db.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByHotelId indicates an expected call of GetRoomByHotelId.
func (mr *MockStoreMockRecorder) GetRoomByHotelId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByHotelId", reflect.TypeOf((*MockStore)(nil).GetRoomByHotelId), arg0, arg1)
}

// GetRoomInventory mocks base method.
func (m *MockStore) GetRoomInventory(arg0 context.Context, arg1 db.GetRoomInventoryParams) (db.RoomInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomInventory", arg0, arg1)
	ret0, _ := ret[0].(db.RoomInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomInventory indicates an expected call of GetRoomInventory.
func (mr *MockStoreMockRecorder) GetRoomInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomInventory", reflect.TypeOf((*MockStore)(nil).GetRoomInventory), arg0, arg1)
}

// GetRoomType mocks base method.
func (m *MockStore) GetRoomType(arg0 context.Context, arg1 int64) (db.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomType", arg0, arg1)
	ret0, _ := ret[0].(db.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomType indicates an expected call of GetRoomType.
func (mr *MockStoreMockRecorder) GetRoomType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomType", reflect.TypeOf((*MockStore)(nil).GetRoomType), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// ListHotels mocks base method.
func (m *MockStore) ListHotels(arg0 context.Context, arg1 db.ListHotelsParams) ([]db.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHotels", arg0, arg1)
	ret0, _ := ret[0].([]db.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHotels indicates an expected call of ListHotels.
func (mr *MockStoreMockRecorder) ListHotels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHotels", reflect.TypeOf((*MockStore)(nil).ListHotels), arg0, arg1)
}

// ListReservations mocks base method.
func (m *MockStore) ListReservations(arg0 context.Context, arg1 db.ListReservationsParams) ([]db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservations", arg0, arg1)
	ret0, _ := ret[0].([]db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations.
func (mr *MockStoreMockRecorder) ListReservations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockStore)(nil).ListReservations), arg0, arg1)
}

// ListRoomInventory mocks base method.
func (m *MockStore) ListRoomInventory(arg0 context.Context, arg1 db.ListRoomInventoryParams) ([]db.RoomInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomInventory", arg0, arg1)
	ret0, _ := ret[0].([]db.RoomInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomInventory indicates an expected call of ListRoomInventory.
func (mr *MockStoreMockRecorder) ListRoomInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomInventory", reflect.TypeOf((*MockStore)(nil).ListRoomInventory), arg0, arg1)
}

// ListRoomType mocks base method.
func (m *MockStore) ListRoomType(arg0 context.Context, arg1 db.ListRoomTypeParams) ([]db.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomType", arg0, arg1)
	ret0, _ := ret[0].([]db.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomType indicates an expected call of ListRoomType.
func (mr *MockStoreMockRecorder) ListRoomType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomType", reflect.TypeOf((*MockStore)(nil).ListRoomType), arg0, arg1)
}

// ListRooms mocks base method.
func (m *MockStore) ListRooms(arg0 context.Context, arg1 db.ListRoomsParams) ([]db.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRooms", arg0, arg1)
	ret0, _ := ret[0].([]db.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRooms indicates an expected call of ListRooms.
func (mr *MockStoreMockRecorder) ListRooms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRooms", reflect.TypeOf((*MockStore)(nil).ListRooms), arg0, arg1)
}

// ReserveTx mocks base method.
func (m *MockStore) ReserveTx(arg0 context.Context, arg1 db.ReserveTxParams) (db.ReserveTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveTx", arg0, arg1)
	ret0, _ := ret[0].(db.ReserveTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveTx indicates an expected call of ReserveTx.
func (mr *MockStoreMockRecorder) ReserveTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveTx", reflect.TypeOf((*MockStore)(nil).ReserveTx), arg0, arg1)
}

// UpdateHotel mocks base method.
func (m *MockStore) UpdateHotel(arg0 context.Context, arg1 db.UpdateHotelParams) (db.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotel", arg0, arg1)
	ret0, _ := ret[0].(db.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHotel indicates an expected call of UpdateHotel.
func (mr *MockStoreMockRecorder) UpdateHotel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotel", reflect.TypeOf((*MockStore)(nil).UpdateHotel), arg0, arg1)
}

// UpdateReservation mocks base method.
func (m *MockStore) UpdateReservation(arg0 context.Context, arg1 db.UpdateReservationParams) (db.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReservation", arg0, arg1)
	ret0, _ := ret[0].(db.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReservation indicates an expected call of UpdateReservation.
func (mr *MockStoreMockRecorder) UpdateReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReservation", reflect.TypeOf((*MockStore)(nil).UpdateReservation), arg0, arg1)
}

// UpdateRoom mocks base method.
func (m *MockStore) UpdateRoom(arg0 context.Context, arg1 db.UpdateRoomParams) (db.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", arg0, arg1)
	ret0, _ := ret[0].(db.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockStoreMockRecorder) UpdateRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockStore)(nil).UpdateRoom), arg0, arg1)
}

// UpdateRoomInventory mocks base method.
func (m *MockStore) UpdateRoomInventory(arg0 context.Context, arg1 db.UpdateRoomInventoryParams) (db.RoomInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomInventory", arg0, arg1)
	ret0, _ := ret[0].(db.RoomInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomInventory indicates an expected call of UpdateRoomInventory.
func (mr *MockStoreMockRecorder) UpdateRoomInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomInventory", reflect.TypeOf((*MockStore)(nil).UpdateRoomInventory), arg0, arg1)
}

// UpdateRoomType mocks base method.
func (m *MockStore) UpdateRoomType(arg0 context.Context, arg1 db.UpdateRoomTypeParams) (db.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomType", arg0, arg1)
	ret0, _ := ret[0].(db.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomType indicates an expected call of UpdateRoomType.
func (mr *MockStoreMockRecorder) UpdateRoomType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomType", reflect.TypeOf((*MockStore)(nil).UpdateRoomType), arg0, arg1)
}
